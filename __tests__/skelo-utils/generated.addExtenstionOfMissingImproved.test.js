// Generated by Qodo Gen

const {addExtensionIfMissing} = require('../../lib/skelo-utils')

describe('addExtensionIfMissing', () => {

    // Returns basename with extension appended if not already present
    it('should append extension when not present', () => {
        const result = addExtensionIfMissing('file', '.txt');
        expect(result).toBe('file.txt');
    });

    it('should not append extension if already present', () => {
        const result = addExtensionIfMissing('file.txt', '.txt');
        expect(result).toBe('file.txt');
    });

    it('should handle extensions without leading dot', () => {
        const result = addExtensionIfMissing('file', 'txt');
        expect(result).toBe('file.txt');
    });

    it('should throw error if basename is not a string', () => {
        expect(() => addExtensionIfMissing(123, '.txt')).toThrow(TypeError);
    });

    it('should throw error if extension is not a string', () => {
        expect(() => addExtensionIfMissing('file', 123)).toThrow(TypeError);
    });

    it('should trim whitespace from basename and extension', () => {
        const result = addExtensionIfMissing(' file ', ' txt ');
        expect(result).toBe('file.txt');
    });

    // Throws TypeError if basename is not a string
    it('should throw TypeError when basename is not a string', () => {
        expect(() => addExtensionIfMissing(123, '.txt')).toThrow(TypeError);
        expect(() => addExtensionIfMissing(null, '.txt')).toThrow(TypeError);
        expect(() => addExtensionIfMissing(undefined, '.txt')).toThrow(TypeError);
        expect(() => addExtensionIfMissing({}, '.txt')).toThrow(TypeError);
        expect(() => addExtensionIfMissing([], '.txt')).toThrow(TypeError);
    });
});
